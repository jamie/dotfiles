" TODO: Clean this up some. Break into a few files, maybe?
" Also, check http://stevelosh.com/blog/2010/09/coming-home-to-vim/
" Also, http://statico.github.com/vim.html


" Using vim, not vi
set nocompatible

" Load plugins
execute pathogen#infect()

" Security fix: http://lists.alioth.debian.org/pipermail/pkg-vim-maintainers/2007-June/004020.html
set modelines=0

" basic config
let mapleader=","
set history=1000

" vimrc editing
map <leader>v :sp ~/.vimrc<cr><C-w>_
map <silent> <leader>V :source ~/.vimrc<cr>:filetype detect<cr>:exe ":echo 'vimrc reloaded'"<cr>

""""""""""
" Editing

set hidden " allow unsaved background buffers
set wildmenu
set showmode
syntax on
filetype plugin indent on

map :W :w " I'm slow releasing shift key
map :W! :w !sudo tee % " save changes if I forgot to sudo vim

set autoindent  " match prev line
set smartindent " change based on content of prev line

" Drop out of insert mode after 5 secs inactive
au CursorHoldI * stopinsert
" For a different time length, uncomment
" au InsertEnter * let inserttimeout=&updatetime | set updatetime=15000 " ms
" au InsertLeave * let &updatetime=inserttimeout

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Whitespace
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

set hidden " allow switching buffers without writing

au FileType make      set noexpandtab
au FileType python    set noexpandtab
au FileType gitconfig set tabstop=8 softtabstop=8 shiftwidth=8
au BufRead,BufNewFile *.clj set ft=scheme
au BufRead,BufNewFile {Vagrantfile,Isolate,Rakefile,config.ru} set ft=ruby
map <Leader>R :set filetype=ruby<CR>

function! s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction
au BufRead,BufNewFile *.txt call s:setupWrapping()

function! s:setupMarkup()
  " this function is probably useless, and I should just use :Mm
  " directly
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

set showmatch " match parens

set ignorecase
set smartcase
set hlsearch
set incsearch
set wrapscan " after bottom, auto go to top

set nofoldenable
set fdm=indent
" nnoremap <Space> za

set scrolloff=5

set backspace=indent,eol,start

imap jj <Esc>
imap lkj <Esc>

""" PLUGINS

" NERD Tree config
nnoremap <Leader>d :NERDTreeToggle<CR>
nnoremap ` :NERDTreeToggle<CR>

" ctrl-p config
" See https://github.com/kien/ctrlp.vim
set wildignore+=*/tmp/*,*.so,*.swp,*.zip
let g:ctrlp_custom_ignore = {
  \ 'dir': 'vendor/bundle\|\.git$'
  \ }

" open files in path of current buffer
map <Leader>e :e <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>T :tabe <C-R>=expand("%:p:h") . "/" <CR>
map <Leader>w :w <C-R>=expand("%:p:h") . "/" <CR>

" Set pwd to current buffer's dir, and make current buffer's dir
nmap <Leader>cd :lcd %:h
nmap <Leader>md :!mkdir -p %:p:h

" Unimpaired configuration
" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv


set backupdir=~/.tmp/backup,.
set directory=~/.tmp,.

""""""""""
" look and feel

if has('gui_running')
	"color xoria256
  set background=dark
  colorscheme solarized
  set guioptions=aAcerL
  set title
else
  color dawn
endif
if has('gui_macvim')
  set transparency=3
  set guifont=Inconsolata:h15
else
  set guifont=Inconsolata\ Medium\ 14
endif

syntax on
set cursorline
set laststatus=2 "include status line even if one window

set number
set ruler
set showcmd
" switch between relative and absolute line numbers
function! g:ToggleNuMode()
 	if (&rnu == 1)
    set nu
  else
    set rnu
  endif
endfunc
nnoremap <leader>n :call g:ToggleNuMode()<cr>

set visualbell t_vb= " No more beeps

" More visually arresting status bar so I know which split window I'm in
hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

function! MyStatusLine(mode)
    let statusline=""
    if a:mode == 'Enter'
        let statusline.="%#StatColor#"
    endif
    let statusline.="\(%n\)\ %f\ "
    if a:mode == 'Enter'
        let statusline.="%*"
    endif
    let statusline.="%#Modified#%m"
    if a:mode == 'Leave'
        let statusline.="%*%r"
    elseif a:mode == 'Enter'
        let statusline.="%r%*"
    endif
    let statusline .= "\ (%l/%L,\ %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "
    return statusline
endfunction

au WinEnter * setlocal statusline=%!MyStatusLine('Enter')
au WinLeave * setlocal statusline=%!MyStatusLine('Leave')
set statusline=%!MyStatusLine('Enter')

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatColor guibg=orange ctermbg=lightred
  elseif a:mode == 'r'
    hi StatColor guibg=#e454ba ctermbg=magenta
  elseif a:mode == 'v'
    hi StatColor guibg=#e454ba ctermbg=magenta
  else
    hi StatColor guibg=red ctermbg=red
  endif
endfunction 

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black


""""""""""
" window management

" Move the cursor to the window left of the current one
noremap <silent> ,h :wincmd h<cr>
noremap <silent> <c-h> :wincmd h<cr>

" Move the cursor to the window below the current one
noremap <silent> ,j :wincmd j<cr>
noremap <silent> <c-j> :wincmd j<cr>

" Move the cursor to the window above the current one
noremap <silent> ,k :wincmd k<cr>
noremap <silent> <c-k> :wincmd k<cr>

" Move the cursor to the window right of the current one
noremap <silent> ,l :wincmd l<cr>
noremap <silent> <c-l> :wincmd l<cr>

" Close the window below this one
noremap <silent> ,cj :wincmd j<cr>:close<cr>

" Close the window above this one
noremap <silent> ,ck :wincmd k<cr>:close<cr>

" Close the window to the left of this one
noremap <silent> ,ch :wincmd h<cr>:close<cr>

" Close the window to the right of this one
noremap <silent> ,cl :wincmd l<cr>:close<cr>

" Close the current window
noremap <silent> ,cc :close<cr>

" Move the current window to the right of the main Vim window
noremap <silent> ,ml <C-W>L

" Move the current window to the top of the main Vim window
noremap <silent> ,mk <C-W>K

" Move the current window to the left of the main Vim window
noremap <silent> ,mh <C-W>H

" Move the current window to the bottom of the main Vim window
noremap <silent> ,mj <C-W>J



""""""""""
" recovering emacs user

nnoremap <C-a> ^
inoremap <C-a> <esc>I
nnoremap <C-e> $
inoremap <C-e> <esc>A
inoremap <C-d> <del>

